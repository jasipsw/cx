# CX50 Heat Pump Optimization Sensors
# Purpose: Track heat pump cycles, startup penalties, and steady-state efficiency
# Goal: Improve COP from 2.0-2.5 to manufacturer's 4.55 rating

- binary_sensor:
    # ------------------------------------------------------------------------
    # Heat Pump Running Detection
    # Detects when heat pump is actively running (power > 500W threshold)
    # ------------------------------------------------------------------------

    - name: "Heat Pump Running"
      unique_id: heat_pump_running
      state: >-
        {% set power = states('sensor.heat_pump_electrical_power_input') | float(0) %}
        {{ power > 500 }}
      device_class: running
      icon: mdi:heat-pump
      availability: >-
        {{ states('sensor.heat_pump_electrical_power_input') not in ['unknown', 'unavailable'] }}

    # ------------------------------------------------------------------------
    # Heat Pump Startup Phase Detection
    # First 3 minutes of operation after startup (180 seconds)
    # ------------------------------------------------------------------------

    - name: "Heat Pump In Startup Phase"
      unique_id: heat_pump_in_startup_phase
      state: >-
        {% set cycle_time = states('sensor.heat_pump_current_cycle_duration') | float(0) %}
        {{ cycle_time > 0 and cycle_time < 180 }}
      icon: mdi:rocket-launch

    # ------------------------------------------------------------------------
    # Heat Pump Steady State Detection
    # After startup phase (> 3 minutes of continuous operation)
    # ------------------------------------------------------------------------

    - name: "Heat Pump In Steady State"
      unique_id: heat_pump_in_steady_state
      state: >-
        {% set cycle_time = states('sensor.heat_pump_current_cycle_duration') | float(0) %}
        {{ cycle_time >= 180 }}
      icon: mdi:speedometer

- sensor:
    # ------------------------------------------------------------------------
    # Cycle Duration Tracking
    # Tracks how long the current heat pump cycle has been running
    # ------------------------------------------------------------------------

    - name: "Heat Pump Current Cycle Duration"
      unique_id: heat_pump_current_cycle_duration
      unit_of_measurement: "s"
      state_class: measurement
      icon: mdi:timer
      state: >-
        {% set running = is_state('binary_sensor.heat_pump_running', 'on') %}
        {% if running %}
          {% set last_change = as_timestamp(states.binary_sensor.heat_pump_running.last_changed) %}
          {% set now = as_timestamp(now()) %}
          {{ (now - last_change) | int(0) }}
        {% else %}
          0
        {% endif %}

    - name: "Heat Pump Current Cycle Duration Minutes"
      unique_id: heat_pump_current_cycle_duration_minutes
      unit_of_measurement: "min"
      state_class: measurement
      icon: mdi:timer
      state: >-
        {% set seconds = states('sensor.heat_pump_current_cycle_duration') | float(0) %}
        {{ (seconds / 60) | round(2) }}

    # ------------------------------------------------------------------------
    # Startup Phase COP Tracking
    # Tracks COP during the first 3 minutes (startup penalty period)
    # ------------------------------------------------------------------------

    - name: "Heat Pump Startup Phase COP"
      unique_id: heat_pump_startup_phase_cop
      state_class: measurement
      icon: mdi:rocket-launch
      state: >-
        {% set in_startup = is_state('binary_sensor.heat_pump_in_startup_phase', 'on') %}
        {% set cop = states('sensor.heat_pump_cop') %}
        {% if in_startup and cop not in ['unavailable', 'unknown'] %}
          {{ cop }}
        {% else %}
          unavailable
        {% endif %}
      availability: >-
        {{ is_state('binary_sensor.heat_pump_in_startup_phase', 'on')
           and states('sensor.heat_pump_cop') not in ['unavailable', 'unknown'] }}

    # ------------------------------------------------------------------------
    # Steady State COP Tracking
    # Tracks COP after startup phase (> 3 minutes of operation)
    # ------------------------------------------------------------------------

    - name: "Heat Pump Steady State COP"
      unique_id: heat_pump_steady_state_cop
      state_class: measurement
      icon: mdi:speedometer
      state: >-
        {% set in_steady = is_state('binary_sensor.heat_pump_in_steady_state', 'on') %}
        {% set cop = states('sensor.heat_pump_cop') %}
        {% if in_steady and cop not in ['unavailable', 'unknown'] %}
          {{ cop }}
        {% else %}
          unavailable
        {% endif %}
      availability: >-
        {{ is_state('binary_sensor.heat_pump_in_steady_state', 'on')
           and states('sensor.heat_pump_cop') not in ['unavailable', 'unknown'] }}

    # ------------------------------------------------------------------------
    # Cycle Statistics
    # ------------------------------------------------------------------------

    - name: "Heat Pump Short Cycle Alert"
      unique_id: heat_pump_short_cycle_alert
      state: >-
        {% set running = is_state('binary_sensor.heat_pump_running', 'on') %}
        {% set duration = states('sensor.heat_pump_current_cycle_duration') | float(0) %}
        {% if not running and duration > 0 and duration < 600 %}
          Short Cycle ({{ (duration / 60) | round(1) }} min)
        {% elif running and duration > 0 %}
          Running ({{ (duration / 60) | round(1) }} min)
        {% else %}
          Idle
        {% endif %}
      icon: >-
        {% set running = is_state('binary_sensor.heat_pump_running', 'on') %}
        {% set duration = states('sensor.heat_pump_current_cycle_duration') | float(0) %}
        {% if not running and duration > 0 and duration < 600 %}
          mdi:alert-circle
        {% elif running %}
          mdi:play-circle
        {% else %}
          mdi:pause-circle
        {% endif %}

    # ------------------------------------------------------------------------
    # Startup Energy Penalty Calculation
    # Estimates extra energy consumed during startup vs steady state
    # ------------------------------------------------------------------------

    - name: "Heat Pump Startup Energy Penalty"
      unique_id: heat_pump_startup_energy_penalty
      unit_of_measurement: "Wh"
      device_class: energy
      state_class: measurement
      icon: mdi:alert-octagon
      state: >-
        {% set in_startup = is_state('binary_sensor.heat_pump_in_startup_phase', 'on') %}
        {% set startup_cop = states('sensor.heat_pump_startup_phase_cop') | float(0) %}
        {% set steady_cop = states('sensor.heat_pump_steady_state_cop') | float(0) %}
        {% set power = states('sensor.heat_pump_electrical_power_input') | float(0) %}
        {% set duration = states('sensor.heat_pump_current_cycle_duration') | float(0) %}

        {% if in_startup and startup_cop > 0 and steady_cop > startup_cop %}
          {# Extra energy = power * time * (1 - startup_cop/steady_cop) #}
          {% set time_hours = duration / 3600 %}
          {% set efficiency_loss = 1 - (startup_cop / steady_cop) %}
          {{ (power * time_hours * efficiency_loss) | round(2) }}
        {% else %}
          0
        {% endif %}

    # ------------------------------------------------------------------------
    # Cycle Efficiency Metrics
    # Overall cycle performance compared to steady-state target
    # ------------------------------------------------------------------------

    - name: "Heat Pump Cycle Efficiency"
      unique_id: heat_pump_cycle_efficiency
      unit_of_measurement: "%"
      state_class: measurement
      icon: mdi:percent
      state: >-
        {% set current_cop = states('sensor.heat_pump_cop') | float(0) %}
        {% set target_cop = 4.55 %}
        {% if current_cop > 0 %}
          {{ ((current_cop / target_cop) * 100) | round(1) }}
        {% else %}
          0
        {% endif %}
      availability: >-
        {{ states('sensor.heat_pump_cop') not in ['unavailable', 'unknown'] }}

    - name: "Heat Pump COP Improvement Needed"
      unique_id: heat_pump_cop_improvement_needed
      state_class: measurement
      icon: mdi:trending-up
      state: >-
        {% set current_cop = states('sensor.heat_pump_cop') | float(0) %}
        {% set target_cop = 4.55 %}
        {% if current_cop > 0 %}
          {{ (target_cop - current_cop) | round(2) }}
        {% else %}
          unavailable
        {% endif %}
      availability: >-
        {{ states('sensor.heat_pump_cop') not in ['unavailable', 'unknown'] }}

    # ------------------------------------------------------------------------
    # Off-Time Tracking (Time between cycles)
    # Tracks how long the heat pump has been idle
    # ------------------------------------------------------------------------

    - name: "Heat Pump Off Time Duration"
      unique_id: heat_pump_off_time_duration
      unit_of_measurement: "min"
      state_class: measurement
      icon: mdi:timer-off
      state: >-
        {% set running = is_state('binary_sensor.heat_pump_running', 'on') %}
        {% if not running %}
          {% set last_change = as_timestamp(states.binary_sensor.heat_pump_running.last_changed) %}
          {% set now = as_timestamp(now()) %}
          {{ ((now - last_change) / 60) | round(1) }}
        {% else %}
          0
        {% endif %}

    # ------------------------------------------------------------------------
    # Cycle Ratio (Runtime vs Total Time)
    # Indicates how much time heat pump spends running vs idle
    # ------------------------------------------------------------------------

    - name: "Heat Pump Cycle Ratio Warning"
      unique_id: heat_pump_cycle_ratio_warning
      state: >-
        {% set runtime = states('sensor.heat_pump_current_cycle_duration') | float(0) / 60 %}
        {% set offtime = states('sensor.heat_pump_off_time_duration') | float(0) %}
        {% set running = is_state('binary_sensor.heat_pump_running', 'on') %}

        {% if running and runtime < 10 and offtime > 30 %}
          Short Cycling - Runtime: {{ runtime | round(1) }}m, Last Off: {{ offtime | round(0) }}m
        {% elif running and runtime >= 10 %}
          Healthy - Runtime: {{ runtime | round(1) }} minutes
        {% elif not running and offtime > 60 %}
          Long Idle - {{ offtime | round(0) }} minutes off
        {% elif not running %}
          Idle - {{ offtime | round(0) }} minutes off
        {% else %}
          Normal
        {% endif %}
      icon: >-
        {% set runtime = states('sensor.heat_pump_current_cycle_duration') | float(0) / 60 %}
        {% set offtime = states('sensor.heat_pump_off_time_duration') | float(0) %}
        {% set running = is_state('binary_sensor.heat_pump_running', 'on') %}

        {% if running and runtime < 10 and offtime > 30 %}
          mdi:alert
        {% elif running and runtime >= 10 %}
          mdi:check-circle
        {% else %}
          mdi:information
        {% endif %}

    # ------------------------------------------------------------------------
    # Average COP Over Last Cycle
    # Uses statistics integration to calculate average COP for completed cycles
    # ------------------------------------------------------------------------

    - name: "Heat Pump Last Cycle Average COP"
      unique_id: heat_pump_last_cycle_average_cop
      state_class: measurement
      icon: mdi:chart-line
      state: >-
        {% set avg_cop = states('sensor.heat_pump_cop_statistics_mean') %}
        {% if avg_cop not in ['unavailable', 'unknown'] %}
          {{ avg_cop }}
        {% else %}
          {{ states('sensor.heat_pump_cop') }}
        {% endif %}
