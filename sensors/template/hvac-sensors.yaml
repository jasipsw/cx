- sensor:


    # ------------------------------------------------------------------------
    # Thermal Power Use 
    # Formula: Q = ṁ × Cp × ΔT
    # ------------------------------------------------------------------------

    - name: "HVAC Buffer Tank Return Temperature"
      unique_id: hvac_buffer_tank_return_temperature
      unit_of_measurement: "°F"
      state_class: measurement
      icon: mdi:thermometer
      state: >-
        {% set return = states('sensor.shellyplus1_c4d8d5543fc0_temperature_3') | float(0) %}
        {{ (return * 1.8 + 32.0) | round(2) }}

    - name: "HVAC Buffer Tank Supply Temperature"
      unique_id: hvac_buffer_tank_supply_termperature
      unit_of_measurement: "°F"
      state_class: measurement
      icon: mdi:thermometer      
      state: >-
        {% set supply = states('sensor.shellyplus1_c4d8d5543fc0_temperature') | float(0) %}
        {{ (supply * 1.8 + 32.0) | round(2) }}

    # - name: "HVAC Buffer Tank Flow Rate"
    #   unique_id: hvac_buffer_tank_flow_rate
    #   unit_of_measurement: "L/min"
    #   device_class: volume_flow_rate
    #   state_class: measurement
    #   icon: mdi:waves-arrow-left
    #   state: >-
    #     {# TEMPORARILY using CX50 flow sensor instead of hydronic_flow_flow_rate #}
    #     {# hydronic_flow_flow_rate appears to be reading 6x too high #}
    #     {# TODO: Calibrate hydronic flow sensor or determine correct scaling factor #}
    #     {% set flow  = states('sensor.cx50_pump_flow_lpm') | float(0) %}
    #     {{ flow | round(0) }}

    - name: "HVAC Buffer Tank Flow Rate"
      unique_id: hvac_buffer_tank_flow_rate
      unit_of_measurement: "L/min"
      device_class: volume_flow_rate
      state_class: measurement
      icon: mdi:waves-arrow-left
      state: >-
        {# Original sensor reading from hydronic flow meter - appears miscalibrated #}
        {% set flow  = states('sensor.hydronic_flow_flow_rate') | float(0) %}
        {{ flow | round(0) }}

    - name: "Flow Sensor Discrepancy Ratio"
      unique_id: flow_sensor_discrepancy_ratio
      state_class: measurement
      icon: mdi:gauge
      state: >-
        {% set cx_flow = states('sensor.cx50_pump_flow_lpm') | float(0) %}
        {% set hydronic_flow = states('sensor.hydronic_flow_flow_rate') | float(0) %}
        {% if cx_flow > 1 %}
          {{ (hydronic_flow / cx_flow) | round(2) }}
        {% else %}
          0
        {% endif %}

    - name: "Flow Sensor Discrepancy Analysis"
      unique_id: flow_sensor_discrepancy_analysis
      state: >-
        {% set cx_flow = states('sensor.cx50_pump_flow_lpm') | float(0) %}
        {% set hydronic_flow = states('sensor.hydronic_flow_flow_rate') | float(0) %}
        {% set ratio = states('sensor.flow_sensor_discrepancy_ratio') | float(0) %}

        {% if cx_flow < 1 %}
          Heat pump idle
        {% elif ratio < 1.2 %}
          Excellent match ({{ ratio }}x - {{ (cx_flow | round(1)) }}L/min vs {{ (hydronic_flow | round(1)) }}L/min)
        {% elif ratio < 1.5 %}
          Good match ({{ ratio }}x - {{ (cx_flow | round(1)) }}L/min vs {{ (hydronic_flow | round(1)) }}L/min)
        {% elif ratio < 2.0 %}
          Acceptable ({{ ratio }}x - {{ (cx_flow | round(1)) }}L/min vs {{ (hydronic_flow | round(1)) }}L/min)
        {% elif ratio < 3.0 %}
          Significant difference ({{ ratio }}x - {{ (cx_flow | round(1)) }}L/min vs {{ (hydronic_flow | round(1)) }}L/min)
        {% else %}
          CRITICAL: Hydronic sensor {{ ratio }}x higher! (CX: {{ (cx_flow | round(1)) }}L/min, Hydronic: {{ (hydronic_flow | round(1)) }}L/min) - Sensor miscalibrated!
        {% endif %}
      icon: >-
        {% set ratio = states('sensor.flow_sensor_discrepancy_ratio') | float(0) %}
        {% if ratio < 1.5 %}
          mdi:check-circle
        {% elif ratio < 3.0 %}
          mdi:alert-circle-outline
        {% else %}
          mdi:alert-circle
        {% endif %}

    - name: "HVAC Buffer Tank Delta T"
      unique_id: hvac_buffer_tank_delta_t
      unit_of_measurement: "°F"
      state_class: measurement
      icon: mdi:delta      
      state: >-
        {% set return = states('sensor.hvac_buffer_tank_return_temperature') | float(0) %}
        {% set supply = states('sensor.hvac_buffer_tank_supply_temperature') | float(0) %}
        {% set flow  = states('sensor.shellyplus1_c4d8d5543fc0_temperature') | float(0) %}
        {% set delta_t = supply - return %}
        {{ delta_t | round(0) }}
         

    - name: "HVAC Buffer Tank Delta T Celsius"
      unique_id: hvac_buffer_tank_delta_t_celsius
      unit_of_measurement: "°C"
      state_class: measurement
      icon: mdi:delta
      state: >-
        {% set return_c = states('sensor.shellyplus1_c4d8d5543fc0_temperature_3') | float(0) %}
        {% set supply_c = states('sensor.shellyplus1_c4d8d5543fc0_temperature') | float(0) %}
        {% set delta_t_c = supply_c - return_c %}
        {{ delta_t_c | round(2) }}

    - name: "HVAC Thermal Power Used"
      unique_id: hvac_thermal_power_used
      unit_of_measurement: "W"
      device_class: power
      state_class: measurement
      icon: mdi:fire
      state: >-
        {# FIXED: Use Celsius temperatures directly from Shelly sensors #}
        {% set return_c = states('sensor.shellyplus1_c4d8d5543fc0_temperature_3') | float(0) %}
        {% set supply_c = states('sensor.shellyplus1_c4d8d5543fc0_temperature') | float(0) %}
        {% set flow_lpm = states('sensor.hvac_buffer_tank_flow_rate') | float(0) %}
        {% set density = states('input_number.cx_fluid_density') | float(970) %}
        {% set specific_heat = states('input_number.cx_fluid_specific_heat') | float(3.95) %}

        {# Calculate delta T in Celsius (required for Q = ṁ × Cp × ΔT formula) #}
        {% set delta_t_c = supply_c - return_c %}

        {# Q = ṁ × Cp × ΔT #}
        {% set flow_lps = flow_lpm / 60 %}
        {% set flow_kgs = (flow_lps * density) / 1000 %}
        {% set specific_heat_j = specific_heat * 1000 %}
        {% set thermal_output = flow_kgs * specific_heat_j * delta_t_c %}
        {{ thermal_output | round(0) }}
      availability: >-
        {{ states('sensor.shellyplus1_c4d8d5543fc0_temperature') not in ['unknown', 'unavailable']
            and states('sensor.shellyplus1_c4d8d5543fc0_temperature_3') not in ['unknown', 'unavailable']
            and states('sensor.hvac_buffer_tank_flow_rate') not in ['unknown', 'unavailable'] }}
